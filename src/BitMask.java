public class BitMask {

    public static void main(String[] args) {
        // 비트 연산
        /*
            A << B == A * 2^B
            A >> B == A / 2^b
            (A + B) >> 1 == (A + B) / 2
        */

        // 비트 연산자 우선순위
        /*
            ~ : not
            << : left shift
            >> : right shift
            & : and
            ^ : xor
            | : or
        */

        // 비트 마스크 : 정수로 집합을 나타냄
        /*
            1. 비트는 정수 하나이기 때문에 배열에 비해 공간이 절약됨
            2. 정수
            3. 보통 0부터 N-1까지 정수로 이루어진 집합을 사용할 때 사용

            현재 집합 S 일때,
            - 어떤 수 n이 포함되어 있는지 검사 => & 비트 사용하여 해당 자리의 수가 1인지 확인
            ex) S & 2^n = S & (1 << n)

            - 어떤 수 n 추가 연산 => | 비트 사용하여 해당 자리의 수를 1로 바꾸어줌
            ex) S | 2^n = S | (1 << n)

            - 어떤 수 n 제거 연산 => &, ~ 비트 사용하여 해당 자리의 수를 0으로 바꾸어줌
            ex) S & ~2^n = S & ~(1 << n)

            - 어떤 수 n 토글 연산 => ^ 비트 사용(xor)
            ex) S ^ 2^n = S ^ (1 << n)

            - 전체 집합: (1 << N) - 1, 공집합: 0
        */

    }

}
